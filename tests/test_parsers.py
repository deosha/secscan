"""
Manifest file parser tests for SecScan
"""
import pytest
import json
from pathlib import Path
import sys

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from secscan import DependencyParser, Language, Dependency


class TestJavaScriptParsers:
    """Test JavaScript manifest file parsers"""
    
    def test_parse_package_json_basic(self, temp_dir):
        """Test parsing basic package.json"""
        pkg_data = {
            "name": "test-app",
            "version": "1.0.0",
            "dependencies": {
                "express": "^4.17.1",
                "lodash": "~4.17.20",
                "axios": ">=0.21.0"
            },
            "devDependencies": {
                "jest": "^27.0.0",
                "eslint": "7.32.0"
            }
        }
        
        pkg_file = temp_dir / "package.json"
        with open(pkg_file, 'w') as f:
            json.dump(pkg_data, f)
        
        deps = DependencyParser.parse_javascript(pkg_file)
        
        assert len(deps) == 5
        
        # Check version cleaning
        dep_dict = {d.name: d.version for d in deps}
        assert dep_dict["express"] == "4.17.1"
        assert dep_dict["lodash"] == "4.17.20"
        assert dep_dict["axios"] == "0.21.0"
        assert dep_dict["jest"] == "27.0.0"
        assert dep_dict["eslint"] == "7.32.0"
    
    def test_parse_package_lock_json_v2(self, temp_dir):
        """Test parsing package-lock.json v2 format"""
        lock_data = {
            "name": "test-app",
            "version": "1.0.0",
            "lockfileVersion": 2,
            "packages": {
                "": {
                    "name": "test-app",
                    "version": "1.0.0",
                    "dependencies": {
                        "express": "^4.17.1"
                    }
                },
                "node_modules/express": {
                    "version": "4.17.1",
                    "resolved": "https://registry.npmjs.org/express/-/express-4.17.1.tgz"
                },
                "node_modules/express/node_modules/body-parser": {
                    "version": "1.19.0"
                },
                "node_modules/accepts": {
                    "version": "1.3.7"
                }
            }
        }
        
        lock_file = temp_dir / "package-lock.json"
        with open(lock_file, 'w') as f:
            json.dump(lock_data, f)
        
        deps = DependencyParser.parse_javascript(lock_file)
        
        # Should extract all dependencies from node_modules
        dep_names = {d.name for d in deps}
        assert "express" in dep_names
        assert "accepts" in dep_names
        
        # Check nested dependencies are parsed correctly
        assert "express/node_modules/body-parser" in dep_names or "body-parser" in dep_names
    
    def test_parse_yarn_lock(self, temp_dir):
        """Test parsing yarn.lock"""
        yarn_content = '''# THIS IS AN AUTOGENERATED FILE
"@babel/code-frame@^7.0.0":
  version "7.16.7"
  resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.16.7.tgz"
  dependencies:
    "@babel/highlight" "^7.16.7"

express@^4.17.1, express@^4.17.2:
  version "4.17.3"
  resolved "https://registry.yarnpkg.com/express/-/express-4.17.3.tgz"

lodash@^4.17.20:
  version "4.17.21"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz"
'''
        
        yarn_file = temp_dir / "yarn.lock"
        yarn_file.write_text(yarn_content)
        
        deps = DependencyParser.parse_javascript(yarn_file)
        
        dep_dict = {d.name: d.version for d in deps}
        assert "@babel/code-frame" in dep_dict
        assert dep_dict["@babel/code-frame"] == "7.16.7"
        assert dep_dict["express"] == "4.17.3"
        assert dep_dict["lodash"] == "4.17.21"
        
        # Should not have duplicate entries for express
        express_deps = [d for d in deps if d.name == "express"]
        assert len(express_deps) == 1
    
    def test_parse_empty_package_json(self, temp_dir):
        """Test parsing package.json with no dependencies"""
        pkg_data = {
            "name": "empty-app",
            "version": "1.0.0"
        }
        
        pkg_file = temp_dir / "package.json"
        with open(pkg_file, 'w') as f:
            json.dump(pkg_data, f)
        
        deps = DependencyParser.parse_javascript(pkg_file)
        assert len(deps) == 0


class TestPythonParsers:
    """Test Python manifest file parsers"""
    
    def test_parse_requirements_txt_basic(self, temp_dir):
        """Test parsing basic requirements.txt"""
        req_content = """# Basic requirements
flask==2.0.1
Django>=3.2.0,<4.0.0
requests~=2.28.0
numpy
pandas!=1.3.0
pytest>=6.0.0

# Comments should be ignored
# flask==1.0.0

git+https://github.com/user/repo.git@v1.0#egg=package
-e ./local/package
"""
        
        req_file = temp_dir / "requirements.txt"
        req_file.write_text(req_content)
        
        deps = DependencyParser.parse_python(req_file)
        
        # Should parse regular packages
        dep_dict = {d.name: d.version for d in deps}
        assert dep_dict["flask"] == "2.0.1"
        assert dep_dict["Django"] == "3.2.0"
        assert dep_dict["requests"] == "2.28.0"
        assert dep_dict["numpy"] == "unknown"
        assert dep_dict["pandas"] == "1.3.0"
        assert dep_dict["pytest"] == "6.0.0"
        
        # Should skip git and local packages
        assert "package" not in dep_dict
        assert all("git+" not in d.name for d in deps)
    
    def test_parse_requirements_txt_pip_freeze(self, temp_dir):
        """Test parsing pip freeze format"""
        req_content = """certifi==2021.10.8
charset-normalizer==2.0.12
click==8.0.4
Flask==2.0.3
idna==3.3
itsdangerous==2.1.0
Jinja2==3.0.3
MarkupSafe==2.1.0
requests==2.27.1
urllib3==1.26.8
Werkzeug==2.0.3"""
        
        req_file = temp_dir / "requirements.txt"
        req_file.write_text(req_content)
        
        deps = DependencyParser.parse_python(req_file)
        
        assert len(deps) == 11
        
        # All should have exact versions
        for dep in deps:
            assert dep.version != "unknown"
            assert "==" not in dep.version  # Version should be cleaned
    
    def test_parse_pipfile_lock(self, temp_dir):
        """Test parsing Pipfile.lock"""
        lock_data = {
            "_meta": {
                "hash": {"sha256": "test"},
                "pipfile-spec": 6,
                "requires": {"python_version": "3.9"}
            },
            "default": {
                "flask": {
                    "hashes": ["sha256:abc123"],
                    "index": "pypi",
                    "version": "==2.0.3"
                },
                "click": {
                    "hashes": ["sha256:def456"],
                    "markers": "python_version >= '3.6'",
                    "version": "==8.0.4"
                },
                "werkzeug": {
                    "version": "==2.0.3"
                }
            },
            "develop": {
                "pytest": {
                    "hashes": ["sha256:ghi789"],
                    "index": "pypi",
                    "version": "==7.0.1"
                },
                "mypy": {
                    "git": "https://github.com/python/mypy.git",
                    "ref": "a1234567890bcdef"
                }
            }
        }
        
        lock_file = temp_dir / "Pipfile.lock"
        with open(lock_file, 'w') as f:
            json.dump(lock_data, f)
        
        deps = DependencyParser.parse_python(lock_file)
        
        dep_dict = {d.name: d.version for d in deps}
        assert dep_dict["flask"] == "2.0.3"
        assert dep_dict["click"] == "8.0.4"
        assert dep_dict["werkzeug"] == "2.0.3"
        assert dep_dict["pytest"] == "7.0.1"
        assert dep_dict["mypy"] == "a123456"  # First 7 chars of git ref
    
    def test_parse_pipfile(self, temp_dir):
        """Test parsing Pipfile (if toml is available)"""
        pipfile_content = '''[packages]
flask = "==2.0.3"
requests = "*"
django = {version = ">=3.2.0", extras = ["argon2"]}
numpy = "~=1.21.0"

[dev-packages]
pytest = "^7.0.0"
black = "*"
'''
        
        pipfile = temp_dir / "Pipfile"
        pipfile.write_text(pipfile_content)
        
        deps = DependencyParser.parse_python(pipfile)
        
        # If toml is not available, should return empty list
        if deps:
            dep_dict = {d.name: d.version for d in deps}
            assert "flask" in dep_dict
            assert "requests" in dep_dict
            assert "pytest" in dep_dict


class TestGoParsers:
    """Test Go manifest file parsers"""
    
    def test_parse_go_mod(self, temp_dir):
        """Test parsing go.mod"""
        mod_content = """module github.com/user/project

go 1.19

require (
    github.com/gin-gonic/gin v1.8.1
    github.com/go-redis/redis/v8 v8.11.5
    github.com/stretchr/testify v1.8.0
    golang.org/x/crypto v0.0.0-20220622213112-05595931fe9d
)

require (
    github.com/cespare/xxhash/v2 v2.1.2 // indirect
    github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
    github.com/gin-contrib/sse v0.1.0 // indirect
)
"""
        
        mod_file = temp_dir / "go.mod"
        mod_file.write_text(mod_content)
        
        deps = DependencyParser.parse_go(mod_file)
        
        # Should only include direct dependencies
        dep_names = [d.name for d in deps]
        assert "github.com/gin-gonic/gin" in dep_names
        assert "github.com/go-redis/redis/v8" in dep_names
        assert "github.com/stretchr/testify" in dep_names
        assert "golang.org/x/crypto" in dep_names
        
        # Should exclude indirect dependencies
        assert "github.com/cespare/xxhash/v2" not in dep_names
        assert "github.com/dgryski/go-rendezvous" not in dep_names
        
        # Check version parsing
        dep_dict = {d.name: d.version for d in deps}
        assert dep_dict["github.com/gin-gonic/gin"] == "1.8.1"
        assert dep_dict["github.com/go-redis/redis/v8"] == "8.11.5"
    
    def test_parse_go_sum(self, temp_dir):
        """Test parsing go.sum"""
        sum_content = """github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
github.com/gin-gonic/gin v1.8.1 h1:4+fr/el88TOO3ewCmQr8cx/CtZ/umlIRIs5M4NTNjf8=
github.com/gin-gonic/gin v1.8.1/go.mod h1:ji8BvRH1azfM+SYow9zQ6SZMvR8qOMZHmsCuWR9tTTk=
golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97 h1:/UOmuWzQfxxo9UtlXMwuQU8CMgg1eZXqTRwkSQJWKOI=
golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
"""
        
        sum_file = temp_dir / "go.sum"
        sum_file.write_text(sum_content)
        
        deps = DependencyParser.parse_go(sum_file)
        
        # Should have unique dependencies
        dep_names = [d.name for d in deps]
        assert "github.com/davecgh/go-spew" in dep_names
        assert "github.com/gin-contrib/sse" in dep_names
        assert "github.com/gin-gonic/gin" in dep_names
        assert "golang.org/x/crypto" in dep_names
        
        # Should not have duplicates
        assert len([d for d in deps if d.name == "github.com/davecgh/go-spew"]) == 1
        
        # Check version parsing (should use latest version)
        dep_dict = {d.name: d.version for d in deps}
        assert dep_dict["github.com/davecgh/go-spew"] == "1.1.1"
        assert dep_dict["github.com/gin-gonic/gin"] == "1.8.1"


class TestParserEdgeCases:
    """Test edge cases and error handling in parsers"""
    
    def test_parse_malformed_json(self, temp_dir):
        """Test handling malformed JSON"""
        pkg_file = temp_dir / "package.json"
        pkg_file.write_text('{"dependencies": {"express": "4.17.1"')  # Missing closing braces
        
        # Should handle gracefully
        with pytest.raises(json.JSONDecodeError):
            DependencyParser.parse_javascript(pkg_file)
    
    def test_parse_empty_files(self, temp_dir):
        """Test parsing empty manifest files"""
        # Empty package.json
        pkg_file = temp_dir / "package.json"
        pkg_file.write_text('{}')
        deps = DependencyParser.parse_javascript(pkg_file)
        assert len(deps) == 0
        
        # Empty requirements.txt
        req_file = temp_dir / "requirements.txt"
        req_file.write_text('')
        deps = DependencyParser.parse_python(req_file)
        assert len(deps) == 0
        
        # Empty go.mod
        mod_file = temp_dir / "go.mod"
        mod_file.write_text('module test')
        deps = DependencyParser.parse_go(mod_file)
        assert len(deps) == 0
    
    def test_parse_unusual_formats(self, temp_dir):
        """Test parsing unusual but valid formats"""
        # requirements.txt with extras
        req_file = temp_dir / "requirements.txt"
        req_file.write_text('''
django[argon2]==3.2.0
requests[security,socks]==2.28.0
"numpy>=1.20.0"
./downloads/SomePackage-1.0.tar.gz
''')
        
        deps = DependencyParser.parse_python(req_file)
        dep_dict = {d.name: d.version for d in deps}
        
        # Should handle packages with extras
        assert "django" in dep_dict or "django[argon2]" in dep_dict
        assert "requests" in dep_dict or "requests[security,socks]" in dep_dict
        assert "numpy" in dep_dict